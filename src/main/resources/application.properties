spring.application.name=LoginSystem

# The secret key is included here for simplicity.
# Realistically in a production environment this wouldn't be here. I could store it as
# environment variables, a secret manager, or an encrypted database
jwt.secret.auth=mySuperSecureLongSecretKeyThatIsAtLeast32BytesLongForAuthentication
jwt.secret.reset=mySuperSecureLongSecretKeyThatIsAtLeast32BytesLongForPasswordReset

# Set up to local Database
spring.datasource.url=jdbc:mysql://localhost:3306/Login_System
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=update

# Google OAuth2 Configuration (Set for local use)
spring.security.oauth2.client.registration.google.client-id=
spring.security.oauth2.client.registration.google.client-secret=YOUR_GOOGLE_CLIENT_SECRET
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

#Configuration for email sender
emailsender.email=
emailsender.password=
emailsender.host=smtp.gmail.com
emailsender.port=587
